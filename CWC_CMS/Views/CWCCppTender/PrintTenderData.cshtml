@model CWC_CMS.Models.CWCCppTenderModel

@{
    ViewBag.Title = "Print";
  
}

<style type="text/css">
    .drop {
        background-color: #fcfcfd;
        border-color: #bdc3d1;
        border-radius: 2px;
        height: 38px;
        outline: none;
    }
</style>

<script type="text/javascript">
function Savefiles() {


        if ($.trim($("#PreQualificationDetails").val()) == '') {
            $("#PreQualificationDetails").val('NA');
        }

        if ($.trim($("#ProductSubCategory").val()) == '') {
            $("#ProductSubCategory").val('NA');
        }

        if ($('.MainBodyCover').length == 1) {
                alert('Cover Details Cannot Be Empty');
                return false;
            }
        else if ($('.MainBodyTender').length == 1) {

            alert('NIT Document Cannot Be Left Empty');
                return false;
        }
        else if ($('.MainBody').length == 1) {

            alert('Work/Item Documents Cannot Be Left Empty');
            return false;
        }
            else {
                return true;
            }

    }
</script>

<script type="text/javascript">
    $(document).ready(function () {
        $('div *').prop('disabled', true);
    });
    $(document).ready(function () {

        $('#basicForm').validate({
            highlight: function (element) {
                $(element).closest('.form-group').removeClass('has-success').addClass('has-error');
            },
            success: function (element) {
                $(element).closest('.form-group').removeClass('has-error');
            }
        });
        $('.select2').select2();

    });
</script>

@using (Html.BeginForm("Create", "CWCCppTender", FormMethod.Post, new { id = "basicForm", @class = "form-horizontal", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        @Html.ValidationSummary(true)
        <!-- panel -->
        <div class="panel panel-primary">
            <div class="panel-heading">
                <table style="width:100%; background-color:transparent">
                    <tr>
                        <td>

                            <h3 style="color:whitesmoke;">CWC Tender</h3>


                        </td>

                        <td style="text-align:right">
                            <a class="btn btn-success btn-quirk btn-wide mr5" href="javascript:window.print()">Click to Print</a>
                        </td>
                    </tr>
                </table>

            </div>

            <div class="panel-body">
                <h3 style="text-align:center">Tender Details</h3>
                <div style="border: dotted 1px">
                    <br /><br /><br />
                    <div class="form-group">
                        <label class="col-sm-2 control-label">Tender Reference Number <span class="text-danger">*</span></label>
                        <div class="col-sm-3">
                            @Html.LabelFor(model => model.TenderReferenceNo, new { @class = "form-control digit", placeholder = "Type here..." })
                            @Html.HiddenFor(model => model.TenderID)
                            <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                            @Html.ValidationMessageFor(model => model.TenderReferenceNo, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">Tender Type <span class="text-danger">*</span></label>
                            <div class="col-sm-3">
                                @Html.DropDownListFor(model => model.TenderType, new SelectList(@ViewBag.FillTenderType, "Value", "Text", selectedValue: false), "Select Tender Type", new { id = "LocationID", @class = "drop select2", style = "width: 100%" })
                                <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                                @Html.ValidationMessageFor(model => model.TenderType, "", new { @class = "text-danger" })

                            </div>
                        </div>
                    </div>



                    <div class="form-group">
                        <label class="col-sm-2 control-label">Form of Contract <span class="text-danger">*</span></label>
                        <div class="col-sm-3">
                            @Html.DropDownListFor(model => model.FormOfContract, new SelectList(@ViewBag.FillFormOfContract, "Value", "Text", selectedValue: false), "Select Form Of Contract", new { id = "LocationID", @class = "drop select2", style = "width: 100%" })
                            <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                            @Html.ValidationMessageFor(model => model.FormOfContract, "", new { @class = "text-danger" })

                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">No Of Cover(s) <span class="text-danger">*</span></label>
                            <div class="col-sm-3">
                                @Html.DropDownListFor(model => model.NoOfCover, new SelectList(@ViewBag.FillNoOfCover, "Value", "Text", selectedValue: false), "Select No Of Cover", new { id = "CoverNo", @class = "drop select2", style = "width: 100%" })
                                <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                                @Html.ValidationMessageFor(model => model.NoOfCover, "", new { @class = "text-danger" })

                            </div>
                        </div>
                    </div>



                    <div class="form-group">
                        <label class="col-sm-2 control-label">Tender Category <span class="text-danger">*</span></label>
                        <div class="col-sm-3">
                            @Html.DropDownListFor(model => model.TenderCategory, new SelectList(@ViewBag.FillTenderCategory, "Value", "Text", selectedValue: false), "Select Tender Category", new { id = "LocationID", @class = "drop select2", style = "width: 100%" })
                            <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                            @Html.ValidationMessageFor(model => model.TenderCategory, "", new { @class = "text-danger" })

                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">State <span class="text-danger">*</span></label>
                            <div class="col-sm-3">
                                @Html.DropDownListFor(model => model.StateID, new SelectList(@ViewBag.FillState, "Value", "Text", selectedValue: false), "Select State", new { id = "StateID", @class = "drop select2", style = "width: 100%" })
                                <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                                @Html.ValidationMessageFor(model => model.StateID, "", new { @class = "text-danger" })

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>



        <div class="container-fluid">
            <div class="panel panel-default">
                <ul class="panel-options">
                    <li><a class="panel-minimize panelMinimizeicon"><i class="fa fa-chevron-down"></i></a></li>
                </ul>


                <div class="panel-heading">
                    <table style="width: 100%; background-color: transparent">
                        <tr>
                            <td>
                                <h4 class="panel-title">Cover Details</h4>
                            </td>
                            <td style="text-align: right"></td>
                        </tr>
                    </table>
                </div>
                <div class="panel-body">


                    <div id="repeaterNew">
                        <div class="form-horizontal">
                            <table id="detailsTableCover" class="table table-bordered table-striped table-responsive">
                                <tbody>
                                    <tr class="MainBodyCover">
                                        <th class="bg-primary">Cover Type</th>
                                        <th class="bg-primary">Cover Name</th>
                                        <th class="bg-primary">Document Description</th>
                                        <th class="bg-primary" width="100px">Document Type</th>
                                    </tr>
                                    @if (Model != null)
                                    {
                                        if (Model.DocumentCoverList != null)
                                        {
                                            for (int i = 0; i < Model.DocumentCoverList.Count; i++)
                                            {
                                                <tr class="MainBodyCover">
                                                    <td>
                                                        @Html.LabelFor(modelItem => modelItem.DocumentCoverList[i].CoverType, new { @class = "form-control", placeholder = "Type here...", readOnly = true })
                                                        @Html.ValidationMessageFor(modelItem => modelItem.DocumentCoverList[i].CoverType, "", new { @class = "text-danger" })

                                                    </td>
                                                    <td>
                                                        @Html.LabelFor(modelItem => modelItem.DocumentCoverList[i].DocumentCoverName, new { @class = "form-control", placeholder = "Type here...", readOnly = true })
                                                        @Html.ValidationMessageFor(modelItem => modelItem.DocumentCoverList[i].DocumentCoverName, "", new { @class = "text-danger" })
                                                    </td>
                                                    <td>
                                                        @Html.TextAreaFor(modelItem => modelItem.DocumentCoverList[i].DocumentDescriptionOfCover, new { @class = "form-control", placeholder = "Type here...", readOnly = true, style = "width:750px; Height:100px;" })
                                                        @Html.ValidationMessageFor(modelItem => modelItem.DocumentCoverList[i].DocumentDescriptionOfCover, "", new { @class = "text-danger" })
                                                    </td>
                                                    <td width="100px">
                                                        @Html.LabelFor(modelItem => modelItem.DocumentCoverList[i].DocumentTypeOfCover, new { @class = "form-control", placeholder = "Type here...", readOnly = true })
                                                        @Html.ValidationMessageFor(modelItem => modelItem.DocumentCoverList[i].DocumentTypeOfCover, "", new { @class = "text-danger" })
                                                    </td>
                                                </tr>

                                            }
                                        }
                                    }
                                </tbody>
                            </table>
                            <input type="hidden" id="OrderId" />
                        </div>
                    </div>


                </div>


                <div class="panel-heading">
                    <table style="width: 100%; background-color: transparent">
                        <tr>
                            <td>
                                <h4 class="panel-title">NIT Document</h4>
                            </td>
                            <td style="text-align: right"></td>
                        </tr>
                    </table>
                </div>
                <div class="panel-body">
                    <div id="repeaterNew">
                        <div class="form-horizontal">
                            <table id="detailsTable" class="table table-bordered table-striped table-responsive">
                                <tbody>
                                    <tr class="MainBodyTender">
                                        <th class="bg-primary">Document Type</th>
                                        <th class="bg-primary">Description</th>
                                        <th class="bg-primary">Uploaded Date</th>
                                        <th class="bg-primary">Document</th>
                                        <th class="bg-primary">Verified By</th>
                                    </tr>
                                    @if (Model != null)
                                    {
                                        if (Model.TenderDocumentsList != null)
                                        {
                                            for (int i = 0; i < Model.TenderDocumentsList.Count; i++)
                                            {
                                                <tr class="MainBodyTender">
                                                    <td>
                                                        @Html.LabelFor(modelItem => modelItem.TenderDocumentsList[i].DocumentypeOfTender, new { @class = "form-control", placeholder = "Type here...", readOnly = true })
                                                        @Html.ValidationMessageFor(modelItem => modelItem.TenderDocumentsList[i].DocumentypeOfTender, "", new { @class = "text-danger" })

                                                    </td>
                                                    <td>
                                                        @Html.LabelFor(modelItem => modelItem.TenderDocumentsList[i].DocumentDescriptionOfTender, new { @class = "form-control", placeholder = "Type here...", readOnly = true })
                                                        @Html.ValidationMessageFor(modelItem => modelItem.TenderDocumentsList[i].DocumentDescriptionOfTender, "", new { @class = "text-danger" })
                                                    </td>
                                                    <td>
                                                        @Html.LabelFor(modelItem => modelItem.TenderDocumentsList[i].UploadedDateOfTender, "{0:dd MMM yyyy}", new { @class = "form-control datepicker", placeholder = "Type here...", readOnly = true })
                                                        @Html.ValidationMessageFor(modelItem => modelItem.TenderDocumentsList[i].UploadedDateOfTender, "", new { @class = "text-danger" })
                                                    </td>
                                                    <td>
                                                        @Html.HiddenFor(modelItem => modelItem.TenderDocumentsList[i].TenderDocumentPath, new { required = false })
                                                        @*@Html.HiddenFor(modelItem => modelItem.WorkItemDocumentsList[i].BankId, new { required = false })*@
                                                        <h4> @Html.ActionLink("View Document", "pdf_View", "CWCCppTender", new { FilePath = Model.TenderDocumentsList[i].TenderDocumentPath }, new { @class = "text-primary ", target = "_blank", style = "width:100px; color:#EE8A21;" })</h4>

                                                    </td>
                                                    <td><input type="text" value="Baldev Sharma" class="form-control" readonly="readonly" /></td>
                                                </tr>

                                            }
                                        }
                                    }
                                </tbody>
                            </table>
                            <input type="hidden" id="OrderId" />
                        </div>
                    </div>

                </div>

                <div class="panel-heading">
                    <table style="width: 100%; background-color: transparent">
                        <tr>
                            <td>
                                <h4 class="panel-title">Work/Item Details</h4>
                            </td>
                            <td style="text-align: right"></td>
                        </tr>
                    </table>
                </div>
                <div class="panel-body">
                    <div class="form-group">
                        <label class="col-sm-2 control-label">Work/Item Title <span class="text-danger">*</span></label>
                        <div class="col-sm-3">
                            @Html.LabelFor(model => model.WorkOrItemTitle, new { @class = "form-control digit", placeholder = "Type here..." })
                            <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                            @Html.ValidationMessageFor(model => model.WorkOrItemTitle, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">Give Location Detail (work / services /items) <span class="text-danger">*</span></label>
                            <div class="col-sm-3">
                                @Html.LabelFor(model => model.LocationDetail, new { @class = "form-control digit", placeholder = "Type here..." })
                                <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                                @Html.ValidationMessageFor(model => model.LocationDetail, "", new { @class = "text-danger" })

                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="col-sm-2 control-label">Work/Item Description <span class="text-danger">*</span></label>
                        <div class="col-sm-3">
                            @Html.TextAreaFor(model => model.WorkOrItemDescription, new { @class = "form-control", placeholder = "Type here..." })
                            <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                            @Html.ValidationMessageFor(model => model.WorkOrItemDescription, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">Pincode <span class="text-danger">*</span></label>
                            <div class="col-sm-3">
                                @Html.LabelFor(model => model.Pincode, new { @class = "form-control digit", placeholder = "Type here..." })
                                <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                                @Html.ValidationMessageFor(model => model.Pincode, "", new { @class = "text-danger" })

                            </div>
                        </div>
                    </div>


                    <div class="form-group">
                        <label class="col-sm-2 control-label">Pre Bid Meeting <span class="text-danger">*</span></label>
                        <div class="custom-control custom-radio custom-control-inline col-sm-1 padding5">
                            @Html.RadioButtonFor(model => model.HasPreBidMeeting, "Yes", new { @class = "custom-control-input", @id = "PreBidMeetingApplicable" })
                            <label class="custom-control-label" for="defaultInline6">Yes</label>
                        </div>
                        <div class="custom-control custom-radio custom-control-inline col-sm-2 padding5">
                            @Html.RadioButtonFor(model => model.HasPreBidMeeting, "No", new { @class = "custom-control-input", @id = "PreBidMeetingNotApplicable" })
                            <label class="custom-control-label" for="defaultInline7">No</label>
                            @Html.ValidationMessageFor(model => model.HasPreBidMeeting, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            <label class="col-sm-2 control-label">Pre Qualification Details </label>
                            <div class="col-sm-3">
                                @Html.TextAreaFor(model => model.PreQualificationDetails, new { @class = "form-control digit", placeholder = "Type here...", @id = "PreQualificationDetails" })
                                <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                                @Html.ValidationMessageFor(model => model.PreQualificationDetails, "", new { @class = "text-danger" })

                            </div>
                        </div>
                    </div>


                    <div class="form-group" id="PreBidMeetingDependentDiv">
                        <label class="col-sm-2 control-label">Pre Bid Meeting Place <span class="text-danger">*</span></label>
                        <div class="col-sm-3">
                            @Html.LabelFor(model => model.PreBidMeetingPlace, new { @class = "form-control", placeholder = "Type here..." })
                            <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                            @Html.ValidationMessageFor(model => model.PreBidMeetingPlace, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">Pre Bid Meeting Address <span class="text-danger">*</span></label>
                            <div class="col-sm-3">
                                @Html.TextAreaFor(model => model.PreBidMeetingAddress, new { @class = "form-control", placeholder = "Type here...", style = "Height:100px;" })
                                <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                                @Html.ValidationMessageFor(model => model.PreBidMeetingAddress, "", new { @class = "text-danger" })

                            </div>
                        </div>
                    </div>


                    <div class="form-group">

                        <label class="col-sm-2 control-label">Product Category <span class="text-danger">*</span></label>
                        <div class="col-sm-3">
                            @Html.DropDownListFor(model => model.ProductCategory, new SelectList(@ViewBag.FillProductCategory, "Value", "Text", selectedValue: false), "Select Product Category", new { id = "LocationID", @class = "drop select2", style = "width: 100%" })
                            <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                            @Html.ValidationMessageFor(model => model.ProductCategory, "", new { @class = "text-danger" })

                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">Product Subcategory </label>
                            <div class="col-sm-3">
                                @Html.LabelFor(model => model.ProductSubCategory, new { @class = "form-control digit", placeholder = "Type here...", @id = "ProductSubCategory" })
                                <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                                @Html.ValidationMessageFor(model => model.ProductSubCategory, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-sm-2 control-label">Bid Opening Place <span class="text-danger">*</span></label>
                        <div class="col-sm-3">
                            @Html.LabelFor(model => model.BidOpeningPlace, new { @class = "form-control digit", placeholder = "Type here..." })
                            <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                            @Html.ValidationMessageFor(model => model.BidOpeningPlace, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">Contract Type <span class="text-danger">*</span></label>
                            <div class="col-sm-3">
                                @Html.DropDownListFor(model => model.ContractType, new SelectList(@ViewBag.FillContractType, "Value", "Text", selectedValue: false), "Select Contract Type", new { id = "LocationID", @class = "drop select2", style = "width: 100%" })
                                <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                                @Html.ValidationMessageFor(model => model.ContractType, "", new { @class = "text-danger" })

                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="col-sm-2 control-label">Tenderer Class <span class="text-danger">*</span></label>
                        <div class="col-sm-3">
                            @Html.DropDownListFor(model => model.TendererClass, new SelectList(@ViewBag.FillTendererClass, "Value", "Text", selectedValue: false), "Select Tenderer Class", new { id = "LocationID", @class = "drop select2", style = "width: 100%" })
                            <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                            @Html.ValidationMessageFor(model => model.TendererClass, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">Tender Value <span class="text-danger">*</span></label>
                            <div class="col-sm-1">
                                @Html.DropDownListFor(model => model.TenderCurrency, new SelectList(@ViewBag.FillTenderCurrency, "Value", "Text", selectedValue: false), "--Select--", new { id = "LocationID", @class = "drop select2", style = "width: 100%" })
                                <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                                @Html.ValidationMessageFor(model => model.TenderCurrency, "", new { @class = "text-danger" })

                            </div>
                            <div class="form-group">
                                <div class="col-sm-2">
                                    @Html.LabelFor(model => model.TenderValue, new { @class = "form-control digit", placeholder = "Type here..." })
                                    <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                                    @Html.ValidationMessageFor(model => model.TenderValue, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>



                    <div class="form-group">
                        <label class="col-sm-2 control-label">Inviting Officer <span class="text-danger">*</span></label>
                        <div class="col-sm-3">
                            @Html.LabelFor(model => model.InvitingOfficer, new { @class = "form-control digit", placeholder = "Type here..." })
                            <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                            @Html.ValidationMessageFor(model => model.InvitingOfficer, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">Bid Validity Days <span class="text-danger">*</span></label>
                            <div class="col-sm-1">
                                @Html.DropDownListFor(model => model.BidValidityDays, new SelectList(@ViewBag.FillBidValidityDays, "Value", "Text", selectedValue: false), "--Select--", new { id = "BidValidityDays", @class = "drop select2", style = "width: 100%" })
                                <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                                @Html.ValidationMessageFor(model => model.BidValidityDays, "", new { @class = "text-danger" })

                            </div>
                            <div class="form-group">
                                <div class="col-sm-2">
                                    @Html.LabelFor(model => model.BidValidityDaysInCaseOfOther, new { @class = "form-control digit", placeholder = "Type here...", readOnly = true, @id = "BidValidityDaysOther" })
                                    <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                                    @Html.ValidationMessageFor(model => model.BidValidityDaysInCaseOfOther, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>


                    <div class="form-group">
                        <label class="col-sm-2 control-label">Inviting Officer Address <span class="text-danger">*</span></label>
                        <div class="col-sm-3">
                            @Html.TextAreaFor(model => model.InvitingOfficerAddress, new { @class = "form-control digit", placeholder = "Type here...", style = "Height:100px;" })
                            <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                            @Html.ValidationMessageFor(model => model.InvitingOfficerAddress, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">Calendar Completion/Delivery Period in Days <span class="text-danger">*</span></label>
                            <div class="col-sm-3">
                                @Html.LabelFor(model => model.DelieveryPeriod, new { @class = "form-control digit", placeholder = "Type here..." })
                                <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                                @Html.ValidationMessageFor(model => model.DelieveryPeriod, "", new { @class = "text-danger" })

                            </div>
                        </div>
                    </div>





                </div>


                <div class="panel-heading">
                    <table style="width: 100%; background-color: transparent">
                        <tr>
                            <td>
                                <h4 class="panel-title">Fee Details</h4>
                            </td>
                            <td style="text-align: right"></td>
                        </tr>
                    </table>
                </div>

                <div class="panel-body">
                    <div class="form-group">
                        <label class="col-sm-2 control-label">Fee Payment Mode <span class="text-danger">*</span></label>
                        <div class="custom-control custom-radio custom-control-inline col-sm-1 padding5">
                            @Html.RadioButtonFor(model => model.FeePaymentMode, "Offline", new { @class = "custom-control-input", @id = "PaymentModeOffLine" })
                            <label class="custom-control-label" for="defaultInline6">Offline</label>
                        </div>
                        <div class="custom-control custom-radio custom-control-inline col-sm-1 padding5">
                            @Html.RadioButtonFor(model => model.FeePaymentMode, "Online", new { @class = "custom-control-input", readOnly = true, disabled = true })
                            <label class="custom-control-label" for="defaultInline7">Online</label>
                        </div>
                        <div class="custom-control custom-radio custom-control-inline col-sm-1 padding5">
                            @Html.RadioButtonFor(model => model.FeePaymentMode, "Not Applicable", new { @class = "custom-control-input", @id = "PaymentModeNotApplicable" })
                            <label class="custom-control-label" for="defaultInline7">Not Applicable</label>
                            @Html.ValidationMessageFor(model => model.FeePaymentMode, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            <label class="col-sm-2 control-label">Tender Fee <span class="text-danger">*</span></label>
                            <div class="col-sm-3">
                                @Html.LabelFor(model => model.TenderFee, new { @class = "form-control digit", placeholder = "Type here...", @id = "TenderFee" })
                                <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                                @Html.ValidationMessageFor(model => model.TenderFee, "", new { @class = "text-danger" })

                            </div>
                        </div>
                    </div>


                    <div class="form-group">
                        <label class="col-sm-2 control-label">Exemption Allowed <span class="text-danger">*</span></label>
                        <div class="custom-control custom-radio custom-control-inline col-sm-1 padding5">
                            @Html.RadioButtonFor(model => model.IsExemptionAllowed, "Yes", new { @class = "custom-control-input", @id = "ExemtionAllowed" })
                            <label class="custom-control-label" for="ExemtionAllowed">Yes</label>
                        </div>
                        <div class="custom-control custom-radio custom-control-inline col-sm-2 padding5">
                            @Html.RadioButtonFor(model => model.IsExemptionAllowed, "No", new { @class = "custom-control-input", @id = "ExemtionNotAllowed" })
                            <label class="custom-control-label" for="ExemtionNotAllowed">No</label>
                            @Html.ValidationMessageFor(model => model.IsExemptionAllowed, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">EMD Fee <span class="text-danger">*</span></label>
                            <div class="custom-control custom-radio custom-control-inline col-sm-1 padding5">
                                @Html.RadioButtonFor(model => model.IsEMDFeeFixedOrPercentage, "Fixed", new { @class = "custom-control-input", @id = "EmdFeeFixed" })
                                <label class="custom-control-label" for="EmdFeeFixed">Fixed</label>
                            </div>
                            <div class="custom-control custom-radio custom-control-inline col-sm-2 padding5">
                                @Html.RadioButtonFor(model => model.IsEMDFeeFixedOrPercentage, "Percentage", new { @class = "custom-control-input", @id = "EmdFeeInPercentage" })
                                <label class="custom-control-label" for="EmdFeeInPercentage">Percentage</label>
                                @Html.ValidationMessageFor(model => model.IsEMDFeeFixedOrPercentage, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>


                    <div class="form-group">
                        <label class="col-sm-2 control-label">Tender Fee Payable To <span class="text-danger">*</span></label>
                        <div class="col-sm-3">
                            @Html.LabelFor(model => model.TenderFeePayableTo, new { @class = "form-control", placeholder = "Type here...", @id = "TenderFeePayableTo" })
                            <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                            @Html.ValidationMessageFor(model => model.TenderFeePayableTo, "", new { @class = "text-danger" })

                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">Tender Fee Payable At <span class="text-danger">*</span></label>
                            <div class="col-sm-3">
                                @Html.LabelFor(model => model.TenderFeePayableAt, new { @class = "form-control", placeholder = "Type here...", @id = "TenderFeePayableAt" })
                                <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                                @Html.ValidationMessageFor(model => model.TenderFeePayableAt, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="col-sm-2 control-label">EMD Amount <span class="text-danger">*</span></label>
                        <div class="col-sm-3">
                            @Html.LabelFor(model => model.EmdAmount, new { @class = "form-control", placeholder = "Type here...", id = "EmdAsFixed" })
                            <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                            @Html.ValidationMessageFor(model => model.EmdAmount, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">EMD ECV % </label>
                            <div class="col-sm-3">
                                @Html.LabelFor(model => model.EmdECVPercentage, new { @class = "form-control digit", placeholder = "Type here...", id = "EmdAsPercentage" })
                                <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                                @Html.ValidationMessageFor(model => model.EmdECVPercentage, "", new { @class = "text-danger" })

                            </div>
                        </div>
                    </div>



                    <div class="form-group">
                        <label class="col-sm-2 control-label">EMD Exemption Allowed <span class="text-danger">*</span></label>
                        <div class="custom-control custom-radio custom-control-inline col-sm-1 padding5">
                            @Html.RadioButtonFor(model => model.IsEmdExceptionAllowed, "Yes", new { @class = "custom-control-input", @id = "EMDExceptionAllowed" })
                            <label class="custom-control-label" for="EMDExceptionAllowed">Yes</label>
                        </div>
                        <div class="custom-control custom-radio custom-control-inline col-sm-2 padding5">
                            @Html.RadioButtonFor(model => model.IsEmdExceptionAllowed, "No", new { @class = "custom-control-input", @id = "EMDExceptionNotAllowed" })
                            <label class="custom-control-label" for="EMDExceptionNotAllowed">No</label>
                            @Html.ValidationMessageFor(model => model.IsEmdExceptionAllowed, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            <label class="col-sm-2 control-label">EMD Fee Payable To <span class="text-danger">*</span></label>
                            <div class="col-sm-3">
                                @Html.LabelFor(model => model.EMDFeePayableTo, new { @class = "form-control", placeholder = "Type here...", @id = "EMDFeePayableTo" })
                                <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                                @Html.ValidationMessageFor(model => model.EMDFeePayableTo, "", new { @class = "text-danger" })

                            </div>
                        </div>
                    </div>




                    <div class="form-group">
                        <label class="col-sm-2 control-label">EMD Fee Payable At <span class="text-danger">*</span></label>
                        <div class="col-sm-3">
                            @Html.LabelFor(model => model.EMDFeePayableAt, new { @class = "form-control", placeholder = "Type here...", @id = "EMDFeePayableAt" })
                            <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                            @Html.ValidationMessageFor(model => model.EMDFeePayableAt, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">Offline Instruments <span class="text-danger">*</span></label>
                            <div class="col-sm-3">
                                @Html.ListBoxFor(model => model.SelectedOfflineInstruments, new SelectList(@ViewBag.FillOfflineInstruments, "Value", "Text", selectedValue: false), new { id = "FillOfflineInstruments", @class = "select2 drop", placeholder = "Select Plots", style = "width: 100%" })
                                <span class="col-sm-3 control-label" style="color:red;margin-right:-10px">   </span>
                                @Html.ValidationMessageFor(model => model.SelectedOfflineInstruments, "", new { @class = "text-danger" })

                            </div>
                        </div>
                    </div>




                </div>


                <div class="panel-heading">
                    <table style="width: 100%; background-color: transparent">
                        <tr>
                            <td>
                                <h4 class="panel-title">Critical Dates</h4>
                            </td>
                            <td style="text-align: right"></td>
                        </tr>
                    </table>
                </div>
                <div class="panel-body">
                    <div class="form-group">
                        <label class="col-sm-2 control-label">Publishing Date <span class="text-danger">*</span></label>
                        <div class="col-sm-3">
                            @Html.LabelFor(model => model.PublishingDate, "{0:dd-MMM-yyyy HH:mm}", new { @class = "form-control datetimepicker", @id = "PublishingDate", @autocomplete = "off", placeholder = "" })
                            @Html.ValidationMessageFor(model => model.PublishingDate, "", new { @class = "text-danger" })

                        </div>
                        <div class="form-group">

                            <label class="col-sm-2 control-label">Document Download / Sale Start Date<span class="text-danger">*</span></label>
                            <div class="col-sm-3">
                                @Html.LabelFor(model => model.DocumentDownloadOrSaleStartDate, "{0:dd-MMM-yyyy HH:mm}", new { @class = "form-control datetimepicker", @id = "AdvertisementEndDateWithTimeId", placeholder = "", @autocomplete = "off" })
                                @Html.ValidationMessageFor(model => model.DocumentDownloadOrSaleStartDate, "", new { @class = "text-danger" })

                            </div>
                        </div>
                    </div>



                    <div class="form-group">
                        <label class="col-sm-2 control-label">Seek Clarification Start Date </label>
                        <div class="col-sm-3">
                            @Html.LabelFor(model => model.SeekClarificationStartDate, "{0:dd-MMM-yyyy HH:mm}", new { @class = "form-control datetimepicker", @id = "PublishingDate", @autocomplete = "off", placeholder = "" })
                            @Html.ValidationMessageFor(model => model.SeekClarificationStartDate, "", new { @class = "text-danger" })

                        </div>
                        <div class="form-group">

                            <label class="col-sm-2 control-label">Seek Clarification End Date</label>
                            <div class="col-sm-3">
                                @Html.LabelFor(model => model.SeekClarificationEndDate, "{0:dd-MMM-yyyy HH:mm}", new { @class = "form-control datetimepicker", @id = "AdvertisementEndDateWithTimeId", placeholder = "", @autocomplete = "off" })
                                @Html.ValidationMessageFor(model => model.SeekClarificationEndDate, "", new { @class = "text-danger" })

                            </div>
                        </div>
                    </div>


                    <div class="form-group">
                        <label class="col-sm-2 control-label">Bid Submission Start Date <span class="text-danger">*</span></label>
                        <div class="col-sm-3">
                            @Html.LabelFor(model => model.BidSubmissionStartDate, "{0:dd-MMM-yyyy HH:mm}", new { @class = "form-control datetimepicker", @autocomplete = "off", placeholder = "" })
                            @Html.ValidationMessageFor(model => model.BidSubmissionStartDate, "", new { @class = "text-danger" })

                        </div>
                        <div class="form-group">

                            <label class="col-sm-2 control-label">Bid Submission Closing Date <span class="text-danger">*</span></label>
                            <div class="col-sm-3">
                                @Html.LabelFor(model => model.BidSubmissionClosingDate, "{0:dd-MMM-yyyy HH:mm}", new { @class = "form-control datetimepicker", placeholder = "", @autocomplete = "off" })
                                @Html.ValidationMessageFor(model => model.BidSubmissionClosingDate, "", new { @class = "text-danger" })

                            </div>
                        </div>
                    </div>


                    <div class="form-group">
                        <label class="col-sm-2 control-label">Bid Opening Date <span class="text-danger">*</span></label>
                        <div class="col-sm-3">
                            @Html.LabelFor(model => model.BidOpeningDate, "{0:dd-MMM-yyyy HH:mm}", new { @class = "form-control datetimepicker", @autocomplete = "off", placeholder = "" })
                            @Html.ValidationMessageFor(model => model.BidOpeningDate, "", new { @class = "text-danger" })

                        </div>

                        <div class="form-group" id="PreBidMeetingDependentDiv1">

                            <label class="col-sm-2 control-label">PreBid Meeting Date<span class="text-danger">*</span></label>
                            <div class="col-sm-3">
                                @Html.LabelFor(model => model.PreBidMeetingDate, "{0:dd-MMM-yyyy HH:mm}", new { @class = "form-control datetimepicker", placeholder = "", @autocomplete = "off" })
                                @Html.ValidationMessageFor(model => model.PreBidMeetingDate, "", new { @class = "text-danger" })

                            </div>
                        </div>

                    </div>



                </div>


                <div class="panel-heading">
                    <table style="width: 100%; background-color: transparent">
                        <tr>
                            <td>
                                <h4 class="panel-title">Work/Item Documents</h4>
                            </td>
                            <td style="text-align: right"></td>
                        </tr>
                    </table>
                </div>
                <div class="panel-body">
                    <div id="repeaterNew">
                        <div class="form-horizontal">
                            <table id="detailsTable" class="table table-bordered table-striped table-responsive">
                                <tbody>
                                    <tr class="MainBody">
                                        <th class="bg-primary">Document Type</th>
                                        <th class="bg-primary">Description</th>
                                        <th class="bg-primary">Uploaded Date</th>
                                        <th class="bg-primary">Document</th>
                                    </tr>
                                    @if (Model != null)
                                    {
                                        if (Model.WorkItemDocumentsList != null)
                                        {
                                            for (int i = 0; i < Model.WorkItemDocumentsList.Count; i++)
                                            {
                                                <tr class="MainBody">
                                                    <td>
                                                        @Html.LabelFor(modelItem => modelItem.WorkItemDocumentsList[i].Documentype, new { @class = "form-control", placeholder = "Type here...", readOnly = true })
                                                        @Html.ValidationMessageFor(modelItem => modelItem.WorkItemDocumentsList[i].Documentype, "", new { @class = "text-danger" })

                                                    </td>
                                                    <td>
                                                        @Html.LabelFor(modelItem => modelItem.WorkItemDocumentsList[i].DocumentDescription, new { @class = "form-control", placeholder = "Type here...", readOnly = true })
                                                        @Html.ValidationMessageFor(modelItem => modelItem.WorkItemDocumentsList[i].DocumentDescription, "", new { @class = "text-danger" })
                                                    </td>
                                                    <td>
                                                        @Html.LabelFor(modelItem => modelItem.WorkItemDocumentsList[i].UploadedDate, "{0:dd MMM yyyy}", new { @class = "form-control datepicker", placeholder = "Type here...", readOnly = true })
                                                        @Html.ValidationMessageFor(modelItem => modelItem.WorkItemDocumentsList[i].DocumentDescription, "", new { @class = "text-danger" })
                                                    </td>
                                                    <td>
                                                        @Html.HiddenFor(modelItem => modelItem.WorkItemDocumentsList[i].WorkItemDocumentPath, new { required = false })
                                                        @*@Html.HiddenFor(modelItem => modelItem.WorkItemDocumentsList[i].BankId, new { required = false })*@
                                                        <h4>@Html.ActionLink("View Document", "pdf_View", "CWCCppTender", new { FilePath = Model.WorkItemDocumentsList[i].WorkItemDocumentPath }, new { @class = "text-primary ", target = "_blank", style = "width:100px; color:#EE8A21;" })</h4>

                                                    </td>
                                                </tr>

                                            }
                                        }
                                    }
                                </tbody>
                            </table>
                            <input type="hidden" id="OrderId" />
                        </div>
                    </div>
                    <br /><br />
                </div>


            </div>
        </div>
    </div>



}


@*<script>

        $(function () {
            if ($('#PreBidMeetingApplicable').is(':checked')) {
                $('#PreBidMeetingDependentDiv').show();
                $('#PreBidMeetingDependentDiv1').show();
            }
            else {
                $('#PreBidMeetingDependentDiv').hide();
                $('#PreBidMeetingDependentDiv1').hide();
            }


            $('#PreBidMeetingApplicable').change(function () {
                $('#PreBidMeetingDependentDiv').fadeIn(1200);
                $('#PreBidMeetingDependentDiv1').fadeIn(1200);
            });

            $('#PreBidMeetingNotApplicable').change(function () {
                $('#PreBidMeetingDependentDiv').fadeOut(1200);
                $('#PreBidMeetingDependentDiv1').fadeOut(1200);
            });



            $('#EmdFeeFixed').change(function () {
                $('#EmdAsFixed').attr('readOnly', false);
                $('#EmdAsPercentage').val(0);
                $('#EmdAsPercentage').attr('readOnly', true);

            });

            $('#EmdFeeInPercentage').change(function () {
                $('#EmdAsFixed').val(0);
                $('#EmdAsFixed').attr('readOnly', true);
                $('#EmdAsPercentage').attr('readOnly', false);
            });




        });
    </script>*@

@*<link href="~/CssJs/jquery.datetimepicker.min.css" rel="stylesheet" />*@
@*<script src="~/CssJs/date.js"></script>*@
@*<script src="~/CssJs/jquery.datetimepicker.js"></script>



    <script>
        $(function () {
            $('.datetimepicker').datetimepicker(
                 {
                     format: 'd-M-Y H:i'
                 });
        });
    </script>*@


@*<script>
        //Add Multiple Order.
        var count = $('.MainBody').length - 1;
        $("#addToList").click(function (e) {
            debugger;
            e.preventDefault();
            if ($.trim($("#DocumentypeRepeater").val()) == "" || $.trim($("#WorkItemDocumentRepeater").val()) == "" || $.trim($("#DocumentDescriptionRepeater").val()) == "" || $.trim($("#UploadedDateRepeater").val()) == "") return;
            count = $('.MainBody').length - 1;
            var Documentype = $("#DocumentypeRepeater").val(),
                WorkItemDocumentRepeater = $("#WorkItemDocumentRepeater").clone(),
                DocumentDescription = $("#DocumentDescriptionRepeater").val(),
                UploadedDate = $("#UploadedDateRepeater").val()
            detailsTableBody = $(".MainBody:last");
            WorkItemDocumentRepeater.attr("id", "NOCDocument").attr("class", "WorkItemDocument").attr("name", "WorkItemDocument").attr('readOnly', true);
            //console.log(BranchName);
            //var productItem = '<tr><td>' + Documentype + '</td><td>' + parseInt(BranchName) + '</td><td>' + parseInt(DocumentDescription) + '</td><td>' + PhoneNo + '</td><td><a data-itemId="0" href="#" class="deleteItem">Remove</a></td><td><a data-itemPlusId="1" href="#" class="Plus"><i class="fa fa-plus"></i></a></td></tr>';


            var productItem = '<tr class = "MainBody"><td>@Html.LabelFor(model => model.WorkItemDocumentsList[0].Documentype, new { @class = "form-control Documentype", placeholder = "Type here...", readOnly = true })</td><td>@Html.LabelFor(model => model.WorkItemDocumentsList[0].DocumentDescription, new { @class = "form-control DocumentDescription", placeholder = "Type here...", readOnly = true })</td><td>@Html.LabelFor(model => model.WorkItemDocumentsList[0].UploadedDate, new { @class = "form-control UploadedDate", placeholder = "Type here...", readOnly = true })</td></td><td><a data-itemId="0" href="#" class="deleteItem">Remove</a></td><td><a data-itemPlusId="1" href="#" class="Plus"><i class="fa fa-plus"></i></a></td></tr>';

            detailsTableBody.after(productItem);
            $(".UploadedDate:last").parent('td').eq(0).after(WorkItemDocumentRepeater);
            $(".Documentype:last").val(Documentype);
            //$(".WorkItemDocument:last").val(WorkItemDocumentRepeater);
            //$(".WorkItemDocument:last").get(0).files[0].value(WorkItemDocumentRepeater);
            $(".DocumentDescription:last").val(DocumentDescription);
            $(".UploadedDate:last").val(UploadedDate);

            console.log($(".Documentype:last").val());
            console.log($(".WorkItemDocument:last").val());
            console.log($(".DocumentDescription:last").val());
            $(".Documentype:last").attr('name', 'WorkItemDocumentsList[' + count + '].Documentype');
            $(".WorkItemDocument:last").attr('name', 'WorkItemDocumentsList[' + count + '].WorkItemDocument');
            $(".UploadedDate:last").attr('name', 'WorkItemDocumentsList[' + count + '].UploadedDate');
            $(".DocumentDescription:last").attr('name', 'WorkItemDocumentsList[' + count + '].DocumentDescription');
            count++;



            clearItem();
            //After insert one row hide the text box row
            $("#ShowRow").hide();
        });

        // click Plus signe to show the row

        $(document).on('click', 'a.Plus', function (e) {
            e.preventDefault();
            var $self = $(this);
            if ($(this).attr('data-itemPlusId') == "1") {
                $("#ShowRow").show();
                $(".Plus").hide();
            }
        });
        // reset the text
        $("#reset").click(function (e) {
            e.preventDefault();
            clearItem();
        });

        //After Add A New row In The List, Clear Clean The Form For Add More Order.
        function clearItem() {
            $("#DocumentypeRepeater").val('');
            $("#WorkItemDocumentRepeater").val('');
            $("#DocumentDescriptionRepeater").val('');
            $("#UploadedDateRepeater").val('');
        }
        // After Add A New row In The List, If You Want, You Can Remove It.
        $(document).on('click', 'a.deleteItem', function (e) {
            e.preventDefault();
            var rowCount = $("#detailsTable").find("tr").length;
            console.log(rowCount);
            if (rowCount == 3) {
                var $self = $(this);
                if ($(this).attr('data-itemId') == "0") {
                    $(this).parents('tr').css("background-color", "#ff6347").fadeOut(200, function () {
                        $(this).remove();
                        $("#ShowRow").show();
                        $(".Plus").hide();
                    });
                }
            }
            else {
                $(this).parents('tr').css("background-color", "#ff6347").fadeOut(200, function () {
                    $(this).remove();
                    $(".Plus").show();
                });
            }
        });

    </script>*@

@*<script type="text/javascript">
        $('#DocumentDescriptionOfCoverRepeater').on('blur', function () {
            var DocumentDescription = $(this).val();
            var CoverType = $('#CoverTypeRepeater').val();
            var DocumentTypeOfCover = $('#DocumentTypeOfCoverRepeater').val();
            $("input[name*='DocumentDescriptionOfCover']").each(function () {
                if ($(this).val() == DocumentDescription) {

                }
            });
        });
    </script>*@

@*<script>
        //Add Multiple Order.
        var count = $('.MainBodyCover').length - 1;
        $("#addToListCover").click(function (e) {
            e.preventDefault();
            if ($("#CoverTypeRepeater").find('option:selected').text() == "Select Cover Type" || $.trim($("#DocumentCoverNameRepeater").val()) == "" || $.trim($("#DocumentDescriptionOfCoverRepeater").val()) == "" || $("#DocumentTypeOfCoverRepeater").find('option:selected').text() == "Select Document Type") {
                alert('Please Fill Cover Details');
                return
            };


            count = $('.MainBodyCover').length - 1;
            var CoverType = $("#CoverTypeRepeater").find('option:selected').text(),
                DocumentCoverName = $("#DocumentCoverNameRepeater").val(),
                DocumentDescriptionOfCover = $("#DocumentDescriptionOfCoverRepeater").val(),
                DocumentTypeOfCover = $("#DocumentTypeOfCoverRepeater").find('option:selected').text()
            detailsTableBody = $(".MainBodyCover:last");


            var productItem = '<tr class = "MainBodyCover"><td>@Html.LabelFor(model => model.DocumentCoverList[0].CoverType, new { @class = "form-control CoverType", placeholder = "Type here...", readOnly = true })</td><td>@Html.TextBoxFor(model => model.DocumentCoverList[0].DocumentCoverName, new { @class = "form-control DocumentCoverName", placeholder = "Type here...", readOnly = true })</td><td>@Html.TextBoxFor(model => model.DocumentCoverList[0].DocumentDescriptionOfCover, new { @class = "form-control DocumentDescriptionOfCover", placeholder = "Type here...", readOnly = true })</td><td>@Html.TextBoxFor(model => model.DocumentCoverList[0].DocumentTypeOfCover, new { @class = "form-control DocumentTypeOfCover", placeholder = "Type here...", readOnly = true })</td><td><a data-itemId="0" href="#" class="deleteItemCover">Remove</a></td><td><a data-itemPlusId="1" href="#" class="PlusCover"><i class="fa fa-plus"></i></a></td></tr>';

            detailsTableBody.after(productItem);
            $(".CoverType:last").val(CoverType);
            $(".DocumentTypeOfCover:last").val(DocumentTypeOfCover);
            //$(".WorkItemDocument:last").get(0).files[0].value(WorkItemDocumentRepeater);
            $(".DocumentCoverName:last").val(DocumentCoverName);
            $(".DocumentDescriptionOfCover:last").val(DocumentDescriptionOfCover);

            $(".CoverType:last").attr('name', 'DocumentCoverList[' + count + '].CoverType');
            $(".DocumentTypeOfCover:last").attr('name', 'DocumentCoverList[' + count + '].DocumentTypeOfCover');
            $(".DocumentDescriptionOfCover:last").attr('name', 'DocumentCoverList[' + count + '].DocumentDescriptionOfCover');
            $(".DocumentCoverName:last").attr('name', 'DocumentCoverList[' + count + '].DocumentCoverName');
            count++;



            clearItemCover();
            //After insert one row hide the text box row
            $("#ShowRowCover").hide();
        });

        // click Plus signe to show the row

        $(document).on('click', 'a.PlusCover', function (e) {
            e.preventDefault();
            var $self = $(this);
            if ($(this).attr('data-itemPlusId') == "1") {
                $("#ShowRowCover").show();
                $(".Plus").hide();
            }
        });
        // reset the text
        $("#reset").click(function (e) {
            e.preventDefault();
            clearItemCover();
        });

        //After Add A New row In The List, Clear Clean The Form For Add More Order.
        function clearItemCover() {
            $("#CoverTypeRepeater").val('-1');
            $("#CoverTypeRepeater").select2();
            $("#DocumentTypeOfCoverRepeater").val('-1');
            $("#DocumentTypeOfCoverRepeater").select2();
            $("#DocumentCoverNameRepeater").val('');
            $("#DocumentDescriptionOfCoverRepeater").val('');
        }
        // After Add A New row In The List, If You Want, You Can Remove It.
        $(document).on('click', 'a.deleteItemCover', function (e) {
            e.preventDefault();
            var rowCount = $("#DocumentTypeOfCover").find("tr").length;
            console.log(rowCount);
            if (rowCount == 3) {
                var $self = $(this);
                if ($(this).attr('data-itemId') == "0") {
                    $(this).parents('tr').css("background-color", "#ff6347").fadeOut(200, function () {
                        $(this).remove();
                        $("#ShowRowCover").show();
                        $(".PlusCover").hide();
                    });
                }
            }
            else {
                $(this).parents('tr').css("background-color", "#ff6347").fadeOut(200, function () {
                    $(this).remove();
                    $(".Plus").show();
                });
            }
        });

    </script>*@

@*<script>
        //Add Multiple Order.
        var count = $('.MainBodyTender').length - 1;
        $("#addToListTender").click(function (e) {
            debugger;
            e.preventDefault();
            if ($.trim($("#DocumentypeOfTenderRepeater").val()) == "" || $.trim($("#DocumentDescriptionOfTenderRepeater").val()) == "" || $.trim($("#UploadedDateOfTenderRepeater").val()) == "" || $.trim($("#TenderDocumentRepeater").val()) == "") return;
            count = $('.MainBodyTender').length - 1;
            var DocumentypeOfTender = $("#DocumentypeOfTenderRepeater").val(),
                TenderDocumentRepeater = $("#TenderDocumentRepeater").clone(),
                DocumentDescriptionOfTender = $("#DocumentDescriptionOfTenderRepeater").val(),
                UploadedDateOfTender = $("#UploadedDateOfTenderRepeater").val()
            detailsTableBody = $(".MainBodyTender:last");
            TenderDocumentRepeater.attr("id", "TenderDocument").attr("class", "TenderDocument").attr("name", "TenderDocument").attr('readOnly', true);

            var productItem = '<tr class = "MainBodyTender"><td>@Html.TextBoxFor(model => model.TenderDocumentsList[0].DocumentypeOfTender, new { @class = "form-control DocumentypeOfTender", placeholder = "Type here...", readOnly = true })</td><td>@Html.TextBoxFor(model => model.TenderDocumentsList[0].DocumentDescriptionOfTender, new { @class = "form-control DocumentDescriptionOfTender", placeholder = "Type here...", readOnly = true })</td><td>@Html.TextBoxFor(model => model.TenderDocumentsList[0].UploadedDateOfTender, new { @class = "form-control UploadedDateOfTender", placeholder = "Type here...", readOnly = true })</td><td><input type="text" value="Baldev Sharma" class="form-control" readonly="readonly" /></td><td><a data-itemId="0" href="#" class="deleteItemTender">Remove</a></td><td><a data-itemPlusId="1" href="#" class="PlusTender"><i class="fa fa-plus"></i></a></td></tr>';

            detailsTableBody.after(productItem);
            $(".UploadedDateOfTender:last").parent('td').eq(0).after(TenderDocumentRepeater);
            $(".DocumentypeOfTender:last").val(DocumentypeOfTender);
            //$(".WorkItemDocument:last").val(WorkItemDocumentRepeater);
            //$(".WorkItemDocument:last").get(0).files[0].value(WorkItemDocumentRepeater);
            $(".DocumentDescriptionOfTender:last").val(DocumentDescriptionOfTender);
            $(".UploadedDateOfTender:last").val(UploadedDateOfTender);

            $(".DocumentypeOfTender:last").attr('name', 'TenderDocumentsList[' + count + '].DocumentypeOfTender');
            $(".TenderDocument:last").attr('name', 'TenderDocumentsList[' + count + '].TenderDocument');
            $(".UploadedDateOfTender:last").attr('name', 'TenderDocumentsList[' + count + '].UploadedDateOfTender');
            $(".DocumentDescriptionOfTender:last").attr('name', 'TenderDocumentsList[' + count + '].DocumentDescriptionOfTender');
            count++;



            clearItemTender();
            //After insert one row hide the text box row
            $("#ShowRowTender").hide();
        });

        // click Plus signe to show the row

        $(document).on('click', 'a.PlusTender', function (e) {
            e.preventDefault();
            var $self = $(this);
            if ($(this).attr('data-itemPlusId') == "1") {
                $("#ShowRowTender").show();
                $(".PlusTender").hide();
            }
        });
        // reset the text
        $("#reset").click(function (e) {
            e.preventDefault();
            clearItemTender();
        });

        //After Add A New row In The List, Clear Clean The Form For Add More Order.
        function clearItemTender() {
            $("#TenderDocumentRepeater").val('');
            $("#DocumentDescriptionOfTenderRepeater").val('');
            $("#UploadedDateOfTenderRepeater").val('');
        }
        // After Add A New row In The List, If You Want, You Can Remove It.
        $(document).on('click', 'a.deleteItemTender', function (e) {
            e.preventDefault();
            var rowCount = $("#detailsTable").find("tr").length;
            console.log(rowCount);
            if (rowCount == 3) {
                var $self = $(this);
                if ($(this).attr('data-itemId') == "0") {
                    $(this).parents('tr').css("background-color", "#ff6347").fadeOut(200, function () {
                        $(this).remove();
                        $("#ShowRowTender").show();
                        $(".PlusTender").hide();
                    });
                }
            }
            else {
                $(this).parents('tr').css("background-color", "#ff6347").fadeOut(200, function () {
                    $(this).remove();
                    $(".PlusTender").show();
                });
            }
        });

    </script>*@

@*<script type="text/javascript">
        $(function () {
            $(".datepicker").datepicker({
                dateFormat: 'dd-M-yy',
                changeMonth: true,
                changeYear: true
            });

        });

    </script>*@
@*
    <script type="text/javascript">
        $(function () {
            $('#CoverNo').on('change', function () {
                if ($(this).find('option:selected').text() == 'Select No Of Cover') {
                    $('#CoverTypeRepeater').empty();
                    $('#CoverTypeRepeater').append($('<option/>', { value: -1, text: 'Select No Of Cover' }));
                    $('#CoverTypeRepeater').select2();
                }
                else {
                    $.ajax({
                        url: '/CWCCppTender/FillCoverTypeByCoverNo',
                        method: 'Post',
                        dataType: 'json',
                        data: { CoverNo: $(this).val() },
                        success: function (data) {
                            $('#CoverTypeRepeater').empty();
                            $('#CoverTypeRepeater').append($('<option/>', { value: -1, text: 'Select No Of Cover' }));
                            $(data).each(function (index, item) {

                                $('#CoverTypeRepeater').append('<option value="' + item.Value + '">' + item.Text + '</option>');
                            });

                            $('#CoverTypeRepeater').select2();
                            $('#CoverTypeRepeater').change();
                        }
                    });
                }
            });


           $('#CoverTypeRepeater').on('change', function () {
                if ($(this).find('option:selected').text() == 'Select Cover Type') {
                    $('#DocumentCoverNameRepeater').val('');
                }
                else {
                    $.ajax({
                        url: '/CWCCppTender/GetCoverNameByCoverType',
                        method: 'Post',
                        dataType: 'json',
                        data: { CoverTypeID: $(this).val() },
                        success: function (data) {
                            $('#DocumentCoverNameRepeater').val('');
                            $('#DocumentCoverNameRepeater').val(data);



                        }
                    });
                }
            });


        });
    </script>*@

@*<script type="text/javascript">

        $('#BidValidityDays').on('change', function () {
            debugger;
            if ($(this).find('option:selected').text() == "Other") {
                $('#BidValidityDaysOther').removeAttr('readonly');
                $('#BidValidityDaysOther').attr('required', true);
            }
            else {
                $('#BidValidityDaysOther').removeAttr('required');
                $('#BidValidityDaysOther').attr('readonly', 'readonly');
                $('#BidValidityDaysOther').val(0);
            }
        })
    </script>*@

@*<script type="text/javascript">


        $(function () {
            if ($('#PaymentModeNotApplicable').is(':checked')) {
                $('#TenderFee').val(0);
                $('#TenderFee').attr('readonly', 'readonly')
                $("input[type='radio'][name='IsExemptionAllowed']").attr('disabled', true)

                $("input[type='radio'][name='IsEMDFeeFixedOrPercentage']").attr('disabled', true);
                $("#FillOfflineInstruments").attr('disabled', true);
                $('#EmdAsFixed').val(0);
                $('#EmdAsFixed').attr('readonly', 'readonly')
                $('#EmdAsPercentage').val(0);
                $('#EmdAsPercentage').attr('readonly', 'readonly')
                $("input[type='radio'][name='IsEmdExceptionAllowed']").attr('disabled', true)
                $('#EMDFeePayableTo').val('NA');
                $('#EMDFeePayableTo').attr('readonly', 'readonly')
                $('#EMDFeePayableAt').val('NA');
                $('#EMDFeePayableAt').attr('readonly', 'readonly')
                $('#TenderFeePayableTo').val('NA');
                $('#TenderFeePayableTo').attr('readonly', 'readonly')
                $('#TenderFeePayableAt').val('NA');
                $('#TenderFeePayableAt').attr('readonly', 'readonly')
            }

        });
        $('#PaymentModeNotApplicable').on('change', function () {
            $('#TenderFee').val(0);
            $('#TenderFee').attr('readonly', 'readonly')
            $("input[type='radio'][name='IsExemptionAllowed']").attr('disabled', true)
            $("#FillOfflineInstruments").attr('disabled', true);
            $("input[type='radio'][name='IsEMDFeeFixedOrPercentage']").attr('disabled', true)
            $('#EmdAsFixed').val(0);
            $('#EmdAsFixed').attr('readonly', 'readonly')
            $('#EmdAsPercentage').val(0);
            $('#EmdAsPercentage').attr('readonly', 'readonly')
            $("input[type='radio'][name='IsEmdExceptionAllowed']").attr('disabled', true)
            $('#EMDFeePayableTo').val('NA');
            $('#EMDFeePayableTo').attr('readonly', 'readonly')
            $('#EMDFeePayableAt').val('NA');
            $('#EMDFeePayableAt').attr('readonly', 'readonly')
            $('#TenderFeePayableTo').val('NA');
            $('#TenderFeePayableTo').attr('readonly', 'readonly')
            $('#TenderFeePayableAt').val('NA');
            $('#TenderFeePayableAt').attr('readonly', 'readonly')
        });

        $('#PaymentModeOffLine').on('change', function () {
            $('#TenderFee').val(0);
            $('#TenderFee').removeAttr('readonly')
            $("input[type='radio'][name='IsExemptionAllowed']").attr('disabled', false)
            $("#FillOfflineInstruments").attr('disabled', false);
            $("input[type='radio'][name='IsEMDFeeFixedOrPercentage']").attr('disabled', false)
            $('#EmdAsFixed').val(0);
            $('#EmdAsFixed').removeAttr('readonly')
            $('#EmdAsPercentage').val(0);
            $('#EmdAsPercentage').removeAttr('readonly')
            $("input[type='radio'][name='IsEmdExceptionAllowed']").attr('disabled', false)
            $('#EMDFeePayableTo').val('NA');
            $('#EMDFeePayableTo').removeAttr('readonly')
            $('#EMDFeePayableAt').val('NA');
            $('#EMDFeePayableAt').removeAttr('readonly')
            $('#TenderFeePayableTo').val('');
            $('#TenderFeePayableTo').removeAttr('readonly')
            $('#TenderFeePayableAt').val('');
            $('#TenderFeePayableAt').removeAttr('readonly')
        });

    </script>*@

@*<script type="text/javascript">

        var SystemDateTimeMinValue = '01-Jan-1753 00:00'
        console.log(SystemDateTimeMinValue);
        $(function () {
            $('.datetimepicker').each(function () {
                if ($(this).val() == SystemDateTimeMinValue) {
                    $(this).val('');
                }
            });
        });
    </script>*@